<% autogen_exception -%>
package provider

import (
	"context"
	"fmt"
	"os"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google<%= "-" + version unless version == 'ga'  -%>/version"
	"github.com/hashicorp/terraform-provider-google<%= "-" + version unless version == 'ga'  -%>/google<%= "-" + version unless version == 'ga'  -%>/service/runtimeconfig"
	"github.com/hashicorp/terraform-provider-google<%= "-" + version unless version == 'ga'  -%>/google<%= "-" + version unless version == 'ga'  -%>/service/composer"
	"github.com/hashicorp/terraform-provider-google<%= "-" + version unless version == 'ga'  -%>/google<%= "-" + version unless version == 'ga'  -%>/service/storagetransfer"
	"github.com/hashicorp/terraform-provider-google<%= "-" + version unless version == 'ga'  -%>/google<%= "-" + version unless version == 'ga'  -%>"

	googleoauth "golang.org/x/oauth2/google"
)

// Provider returns a *schema.Provider.
func Provider() *schema.Provider {

	// The mtls service client gives the type of endpoint (mtls/regular)
	// at client creation. Since we use a shared client for requests we must
	// rewrite the endpoints to be mtls endpoints for the scenario where
	// mtls is enabled.
	if isMtls() {
		// if mtls is enabled switch all default endpoints to use the mtls endpoint
		for key, bp := range google.DefaultBasePaths {
			google.DefaultBasePaths[key] = getMtlsEndpoint(bp)
		}
	}

	provider := &schema.Provider{
		Schema: map[string]*schema.Schema{
			"credentials": {
				Type:     schema.TypeString,
				Optional: true,
				ValidateFunc: ValidateCredentials,
				ConflictsWith: []string{"access_token"},
			},

			"access_token": {
				Type:     schema.TypeString,
				Optional: true,
				ConflictsWith: []string{"credentials"},
			},

			"impersonate_service_account": {
				Type:     schema.TypeString,
				Optional: true,
				DefaultFunc: schema.MultiEnvDefaultFunc([]string{
					"GOOGLE_IMPERSONATE_SERVICE_ACCOUNT",
				}, nil),
			},

			"impersonate_service_account_delegates": {
				Type:     schema.TypeList,
				Optional: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},

			"project": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"billing_project": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"region": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"zone": {
				Type:     schema.TypeString,
				Optional: true,
			},

			"scopes": {
				Type:     schema.TypeList,
				Optional: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},

			"batching": {
				Type:     schema.TypeList,
				Optional: true,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"send_after": {
							Type:     schema.TypeString,
							Optional: true,
							Default:  "10s",
							ValidateFunc: validateNonNegativeDuration(),
						},
						"enable_batching": {
							Type:     schema.TypeBool,
							Optional: true,
							Default:  true,
						},
					},
				},
			},

			"user_project_override": {
				Type:     schema.TypeBool,
				Optional: true,
			},

			"request_timeout": {
			    Type:     schema.TypeString,
			    Optional: true,
			},

			"request_reason": {
				Type:     schema.TypeString,
				Optional: true,
			},

			// Generated Products
			<% products.each do |product| -%>
			"<%= product[:definitions].name.underscore -%>_custom_endpoint": {
				Type:         schema.TypeString,
				Optional:     true,
				ValidateFunc: validateCustomEndpoint,
			},
			<% end -%>

			// Handwritten Products / Versioned / Atypical Entries
			CloudBillingCustomEndpointEntryKey:           CloudBillingCustomEndpointEntry,
			ComposerCustomEndpointEntryKey:               ComposerCustomEndpointEntry,
			ContainerCustomEndpointEntryKey:              ContainerCustomEndpointEntry,
			DataflowCustomEndpointEntryKey:               DataflowCustomEndpointEntry,
			IamCredentialsCustomEndpointEntryKey:         IamCredentialsCustomEndpointEntry,
			ResourceManagerV3CustomEndpointEntryKey:      ResourceManagerV3CustomEndpointEntry,
			<% unless version == "ga" -%>
			RuntimeConfigCustomEndpointEntryKey:          RuntimeConfigCustomEndpointEntry,
			<% end -%>
			IAMCustomEndpointEntryKey:                    IAMCustomEndpointEntry,
			ServiceNetworkingCustomEndpointEntryKey:      ServiceNetworkingCustomEndpointEntry,
			TagsLocationCustomEndpointEntryKey:           TagsLocationCustomEndpointEntry,

			// dcl
			ContainerAwsCustomEndpointEntryKey:           ContainerAwsCustomEndpointEntry,
			ContainerAzureCustomEndpointEntryKey:         ContainerAzureCustomEndpointEntry,
		},

		ProviderMetaSchema: map[string]*schema.Schema{
			"module_name": {
				Type:     schema.TypeString,
				Optional: true,
			},
		},

		DataSourcesMap: map[string]*schema.Resource{
			// ####### START datasources ###########
			"google_access_approval_folder_service_account":    google.DataSourceAccessApprovalFolderServiceAccount(),
			"google_access_approval_organization_service_account": google.DataSourceAccessApprovalOrganizationServiceAccount(),
			"google_access_approval_project_service_account":   google.DataSourceAccessApprovalProjectServiceAccount(),
			"google_active_folder":                             google.DataSourceGoogleActiveFolder(),
			"google_artifact_registry_repository":              google.DataSourceArtifactRegistryRepository(),
			"google_app_engine_default_service_account":        google.DataSourceGoogleAppEngineDefaultServiceAccount(),
			"google_beyondcorp_app_connection":                 google.DataSourceGoogleBeyondcorpAppConnection(),
			"google_beyondcorp_app_connector":                  google.DataSourceGoogleBeyondcorpAppConnector(),
			"google_beyondcorp_app_gateway":                    google.DataSourceGoogleBeyondcorpAppGateway(),
			"google_billing_account":                           google.DataSourceGoogleBillingAccount(),
			"google_bigquery_default_service_account":          google.DataSourceGoogleBigqueryDefaultServiceAccount(),
			"google_client_config":                             google.DataSourceGoogleClientConfig(),
			"google_client_openid_userinfo":                    google.DataSourceGoogleClientOpenIDUserinfo(),
			"google_cloudbuild_trigger":                        google.DataSourceGoogleCloudBuildTrigger(),
			"google_cloudfunctions_function":                   google.DataSourceGoogleCloudFunctionsFunction(),
			"google_cloudfunctions2_function":                  google.DataSourceGoogleCloudFunctions2Function(),
			<% unless version == 'ga' -%>
			"google_cloud_asset_resources_search_all":          google.DataSourceGoogleCloudAssetResourcesSearchAll(),
			<% end -%>
			"google_cloud_identity_groups":                     google.DataSourceGoogleCloudIdentityGroups(),
			"google_cloud_identity_group_memberships":          google.DataSourceGoogleCloudIdentityGroupMemberships(),
			"google_cloud_run_locations":                       google.DataSourceGoogleCloudRunLocations(),
			"google_cloud_run_service":                         google.DataSourceGoogleCloudRunService(),
			"google_composer_environment":                      composerservice.DataSourceGoogleComposerEnvironment(),
			"google_composer_image_versions":                   composerservice.DataSourceGoogleComposerImageVersions(),
			"google_compute_address":                           google.DataSourceGoogleComputeAddress(),
			"google_compute_addresses":                         google.DataSourceGoogleComputeAddresses(),
			"google_compute_backend_service":                   google.DataSourceGoogleComputeBackendService(),
			"google_compute_backend_bucket":                    google.DataSourceGoogleComputeBackendBucket(),
			"google_compute_default_service_account":           google.DataSourceGoogleComputeDefaultServiceAccount(),
			"google_compute_disk":        					    google.DataSourceGoogleComputeDisk(),
			"google_compute_forwarding_rule":                   google.DataSourceGoogleComputeForwardingRule(),
			"google_compute_global_address":                    google.DataSourceGoogleComputeGlobalAddress(),
			"google_compute_global_forwarding_rule":            google.DataSourceGoogleComputeGlobalForwardingRule(),
			"google_compute_ha_vpn_gateway":                    google.DataSourceGoogleComputeHaVpnGateway(),
			"google_compute_health_check":                      google.DataSourceGoogleComputeHealthCheck(),
			"google_compute_image":                             google.DataSourceGoogleComputeImage(),
			"google_compute_instance":                          google.DataSourceGoogleComputeInstance(),
			"google_compute_instance_group":                    google.DataSourceGoogleComputeInstanceGroup(),
			"google_compute_instance_group_manager":            google.DataSourceGoogleComputeInstanceGroupManager(),
			"google_compute_instance_serial_port":              google.DataSourceGoogleComputeInstanceSerialPort(),
			"google_compute_instance_template":                 google.DataSourceGoogleComputeInstanceTemplate(),
			"google_compute_lb_ip_ranges":                      google.DataSourceGoogleComputeLbIpRanges(),
			"google_compute_network":                           google.DataSourceGoogleComputeNetwork(),
			"google_compute_network_endpoint_group":            google.DataSourceGoogleComputeNetworkEndpointGroup(),
			"google_compute_network_peering":                   google.DataSourceComputeNetworkPeering(),
			"google_compute_node_types":                        google.DataSourceGoogleComputeNodeTypes(),
			"google_compute_regions":                           google.DataSourceGoogleComputeRegions(),
			"google_compute_region_network_endpoint_group":     google.DataSourceGoogleComputeRegionNetworkEndpointGroup(),
			"google_compute_region_instance_group":             google.DataSourceGoogleComputeRegionInstanceGroup(),
			"google_compute_region_ssl_certificate":            google.DataSourceGoogleRegionComputeSslCertificate(),
			"google_compute_resource_policy":                   google.DataSourceGoogleComputeResourcePolicy(),
			"google_compute_router":                            google.DataSourceGoogleComputeRouter(),
			"google_compute_router_nat":                        google.DataSourceGoogleComputeRouterNat(),
			"google_compute_router_status":                     google.DataSourceGoogleComputeRouterStatus(),
			"google_compute_snapshot":                          google.DataSourceGoogleComputeSnapshot(),
			"google_compute_ssl_certificate":                   google.DataSourceGoogleComputeSslCertificate(),
			"google_compute_ssl_policy":                        google.DataSourceGoogleComputeSslPolicy(),
			"google_compute_subnetwork":                        google.DataSourceGoogleComputeSubnetwork(),
			"google_compute_vpn_gateway":                       google.DataSourceGoogleComputeVpnGateway(),
			"google_compute_zones":                             google.DataSourceGoogleComputeZones(),
			"google_container_azure_versions":                  google.DataSourceGoogleContainerAzureVersions(),
			"google_container_aws_versions":                    google.DataSourceGoogleContainerAwsVersions(),
			"google_container_attached_versions":               google.DataSourceGoogleContainerAttachedVersions(),
			"google_container_attached_install_manifest":       google.DataSourceGoogleContainerAttachedInstallManifest(),
			"google_container_cluster":                         google.DataSourceGoogleContainerCluster(),
			"google_container_engine_versions":                 google.DataSourceGoogleContainerEngineVersions(),
			"google_container_registry_image":                  google.DataSourceGoogleContainerImage(),
			"google_container_registry_repository":             google.DataSourceGoogleContainerRepo(),
			"google_dataproc_metastore_service":                google.DataSourceDataprocMetastoreService(),
			"google_game_services_game_server_deployment_rollout":  google.DataSourceGameServicesGameServerDeploymentRollout(),
			"google_iam_policy":                                google.DataSourceGoogleIamPolicy(),
			"google_iam_role":                                  google.DataSourceGoogleIamRole(),
			"google_iam_testable_permissions":                  google.DataSourceGoogleIamTestablePermissions(),
			<% unless version == 'ga' -%>
			"google_iam_workload_identity_pool":                google.DataSourceIAMBetaWorkloadIdentityPool(),
			"google_iam_workload_identity_pool_provider":       google.DataSourceIAMBetaWorkloadIdentityPoolProvider(),
			<% end -%>
			"google_iap_client":                                google.DataSourceGoogleIapClient(),
			"google_kms_crypto_key":                            google.DataSourceGoogleKmsCryptoKey(),
			"google_kms_crypto_key_version":                    google.DataSourceGoogleKmsCryptoKeyVersion(),
			"google_kms_key_ring":                              google.DataSourceGoogleKmsKeyRing(),
			"google_kms_secret":                                google.DataSourceGoogleKmsSecret(),
			"google_kms_secret_ciphertext":                     google.DataSourceGoogleKmsSecretCiphertext(),
			<% unless version == 'ga' -%>
                        "google_kms_secret_asymmetric":                     google.DataSourceGoogleKmsSecretAsymmetric(),
                        "google_firebase_android_app":                      google.DataSourceGoogleFirebaseAndroidApp(),
      			"google_firebase_apple_app":                        google.DataSourceGoogleFirebaseAppleApp(),
			"google_firebase_apple_app_config":                 google.DataSourceGoogleFirebaseAppleAppConfig(),
			"google_firebase_web_app":                          google.DataSourceGoogleFirebaseWebApp(),
			"google_firebase_web_app_config":                   google.DataSourceGoogleFirebaseWebappConfig(),
			<% end -%>
			"google_folder":                                    google.DataSourceGoogleFolder(),
			"google_folders":                                   google.DataSourceGoogleFolders(),
			"google_folder_organization_policy":                google.DataSourceGoogleFolderOrganizationPolicy(),
			"google_logging_project_cmek_settings":             google.DataSourceGoogleLoggingProjectCmekSettings(),
			"google_monitoring_notification_channel":           google.DataSourceMonitoringNotificationChannel(),
			"google_monitoring_cluster_istio_service":          google.DataSourceMonitoringServiceClusterIstio(),
			"google_monitoring_istio_canonical_service":        google.DataSourceMonitoringIstioCanonicalService(),
			"google_monitoring_mesh_istio_service":             google.DataSourceMonitoringServiceMeshIstio(),
			"google_monitoring_app_engine_service":             google.DataSourceMonitoringServiceAppEngine(),
			"google_monitoring_uptime_check_ips":               google.DataSourceGoogleMonitoringUptimeCheckIps(),
			"google_netblock_ip_ranges":                        google.DataSourceGoogleNetblockIpRanges(),
			"google_organization":                              google.DataSourceGoogleOrganization(),
			"google_privateca_certificate_authority":           google.DataSourcePrivatecaCertificateAuthority(),
			"google_project":                                   google.DataSourceGoogleProject(),
			"google_projects":                                  google.DataSourceGoogleProjects(),
			"google_project_organization_policy":               google.DataSourceGoogleProjectOrganizationPolicy(),
			"google_project_service":                           google.DataSourceGoogleProjectService(),
			"google_pubsub_subscription":                       google.DataSourceGooglePubsubSubscription(),
			"google_pubsub_topic":                              google.DataSourceGooglePubsubTopic(),
			<% unless version == 'ga' -%>
			"google_runtimeconfig_config":                      runtimeconfigservice.DataSourceGoogleRuntimeconfigConfig(),
			"google_runtimeconfig_variable":                    runtimeconfigservice.DataSourceGoogleRuntimeconfigVariable(),
			<% end -%>
			"google_secret_manager_secret":                     google.DataSourceSecretManagerSecret(),
			"google_secret_manager_secret_version":             google.DataSourceSecretManagerSecretVersion(),
			"google_secret_manager_secret_version_access":      google.DataSourceSecretManagerSecretVersionAccess(),
			"google_service_account":                           google.DataSourceGoogleServiceAccount(),
			"google_service_account_access_token":              google.DataSourceGoogleServiceAccountAccessToken(),
			"google_service_account_id_token":                  google.DataSourceGoogleServiceAccountIdToken(),
			"google_service_account_jwt":                       google.DataSourceGoogleServiceAccountJwt(),
			"google_service_account_key":                       google.DataSourceGoogleServiceAccountKey(),
			"google_sourcerepo_repository":                     google.DataSourceGoogleSourceRepoRepository(),
			"google_spanner_instance":                          google.DataSourceSpannerInstance(),
			"google_sql_ca_certs":                              google.DataSourceGoogleSQLCaCerts(),
			"google_sql_backup_run":                            google.DataSourceSqlBackupRun(),
			"google_sql_database":                              google.DataSourceSqlDatabase(),
			"google_sql_database_instance":                     google.DataSourceSqlDatabaseInstance(),
			"google_sql_database_instances":                    google.DataSourceSqlDatabaseInstances(),
			"google_service_networking_peered_dns_domain":      google.DataSourceGoogleServiceNetworkingPeeredDNSDomain(),
			"google_storage_bucket":                            google.DataSourceGoogleStorageBucket(),
			"google_storage_bucket_object":                     google.DataSourceGoogleStorageBucketObject(),
			"google_storage_bucket_object_content":             google.DataSourceGoogleStorageBucketObjectContent(),
			"google_storage_object_signed_url":                 google.DataSourceGoogleSignedUrl(),
			"google_storage_project_service_account":           google.DataSourceGoogleStorageProjectServiceAccount(),
			"google_storage_transfer_project_service_account":  google.DataSourceGoogleStorageTransferProjectServiceAccount(),
			"google_tags_tag_key":                              google.DataSourceGoogleTagsTagKey(),
			"google_tags_tag_value":                            google.DataSourceGoogleTagsTagValue(),
			"google_tpu_tensorflow_versions":                   google.DataSourceTpuTensorflowVersions(),
			"google_vpc_access_connector":                      google.DataSourceVPCAccessConnector(),
			"google_redis_instance":                            google.DataSourceGoogleRedisInstance(),
			// ####### END datasources ###########
		},
		ResourcesMap: ResourceMap(),
	}

	provider.ConfigureContextFunc = func(ctx context.Context, d *schema.ResourceData) (interface{}, diag.Diagnostics) {
		return providerConfigure(ctx, d, provider)
	}

	google.ConfigureDCLProvider(provider)

	return provider
}

<%
resource_count = 0
iam_resource_count = 0
products.each do |product|
  product_definition = product[:definitions]
  product_definition.objects.reject { |r| r.exclude || r.not_in_version?(product_definition.version_obj_or_closest(version)) }.each do |object|
	resource_count += 1 unless object&.exclude_resource
	iam_policy = object&.iam_policy
	unless iam_policy.nil? || iam_policy.exclude
	  iam_resource_count += 3
	end
  end
end
-%>
// Generated resources: <%= resource_count %>
// Generated IAM resources: <%= iam_resource_count %>
// Total generated resources: <%= resource_count + iam_resource_count %>
func ResourceMap() map[string]*schema.Resource {
	resourceMap, _ := ResourceMapWithErrors()
	return resourceMap
}

func ResourceMapWithErrors() (map[string]*schema.Resource, error) {
	return mergeResourceMaps(
			map[string]*schema.Resource{
<%
products.each do |product|
  product_definition = product[:definitions]
  config = product[:overrides]
  product_definition.objects.each do |object|
	next if object.exclude || object.not_in_version?(product_definition.version_obj_or_closest(version))
	tf_product = (config.legacy_name || product_definition.name).underscore
	terraform_name = object.legacy_name || "google_#{tf_product}_#{object.name.underscore}"
-%>
<% 	unless object&.exclude_resource -%>
	"<%= terraform_name -%>": <%= product_definition.IsMigrated ? product_definition.name.downcase + "service" : "google" -%>.Resource<%= product_definition.name + object.name -%>(),
<%  end -%>
<%
	iam_policy = object&.iam_policy
	unless iam_policy.nil? || iam_policy.exclude ||
		(iam_policy.min_version && iam_policy.min_version < version)
	  iam_class_name = product_definition.name + object.name
-%>
	"<%= terraform_name -%>_iam_binding":              google.ResourceIamBinding(google.<%= iam_class_name -%>IamSchema, google.<%= iam_class_name -%>IamUpdaterProducer, google.<%= iam_class_name -%>IdParseFunc),
	"<%= terraform_name -%>_iam_member":               google.ResourceIamMember(google.<%= iam_class_name -%>IamSchema, google.<%= iam_class_name -%>IamUpdaterProducer, google.<%= iam_class_name -%>IdParseFunc),
	"<%= terraform_name -%>_iam_policy":               google.ResourceIamPolicy(google.<%= iam_class_name -%>IamSchema, google.<%= iam_class_name -%>IamUpdaterProducer, google.<%= iam_class_name -%>IdParseFunc),
<%
	end # unless iam_policy.nil? || iam_policy.exclude
  end   # product_definition.objects.each do
end     # products.each do
-%>
			},
			map[string]*schema.Resource{
				// ####### START handwritten resources ###########
				"google_app_engine_application":                google.ResourceAppEngineApplication(),
				"google_bigquery_table":                        google.ResourceBigQueryTable(),
				"google_bigtable_gc_policy":                    google.ResourceBigtableGCPolicy(),
				"google_bigtable_instance":                     google.ResourceBigtableInstance(),
				"google_bigtable_table":                        google.ResourceBigtableTable(),
				"google_billing_subaccount":                    google.ResourceBillingSubaccount(),
				"google_cloudfunctions_function":               google.ResourceCloudFunctionsFunction(),
				"google_composer_environment":                  composerservice.ResourceComposerEnvironment(),
				"google_compute_attached_disk":                 google.ResourceComputeAttachedDisk(),
				"google_compute_instance":                      google.ResourceComputeInstance(),
				<% unless version == 'ga' -%>
				"google_compute_instance_from_machine_image":   google.ResourceComputeInstanceFromMachineImage(),
				<% end -%>
				"google_compute_instance_from_template":        google.ResourceComputeInstanceFromTemplate(),
				"google_compute_instance_group":                google.ResourceComputeInstanceGroup(),
				"google_compute_instance_group_manager":        google.ResourceComputeInstanceGroupManager(),
				"google_compute_instance_template":             google.ResourceComputeInstanceTemplate(),
				"google_compute_network_peering":               google.ResourceComputeNetworkPeering(),
				"google_compute_project_default_network_tier":  google.ResourceComputeProjectDefaultNetworkTier(),
				"google_compute_project_metadata":              google.ResourceComputeProjectMetadata(),
				"google_compute_project_metadata_item":         google.ResourceComputeProjectMetadataItem(),
				"google_compute_region_instance_group_manager": google.ResourceComputeRegionInstanceGroupManager(),
				"google_compute_router_interface":              google.ResourceComputeRouterInterface(),
				"google_compute_security_policy":               google.ResourceComputeSecurityPolicy(),
				"google_compute_shared_vpc_host_project":       google.ResourceComputeSharedVpcHostProject(),
				"google_compute_shared_vpc_service_project":    google.ResourceComputeSharedVpcServiceProject(),
				"google_compute_target_pool":                   google.ResourceComputeTargetPool(),
				"google_container_cluster":                     google.ResourceContainerCluster(),
				"google_container_node_pool":                   google.ResourceContainerNodePool(),
				"google_container_registry":                    google.ResourceContainerRegistry(),
				"google_dataflow_job":                          google.ResourceDataflowJob(),
				<% unless version == 'ga' -%>
				"google_dataflow_flex_template_job":            google.ResourceDataflowFlexTemplateJob(),
				<% end -%>
				"google_dataproc_cluster":                      google.ResourceDataprocCluster(),
				"google_dataproc_job":                          google.ResourceDataprocJob(),
				"google_dialogflow_cx_version":                 google.ResourceDialogflowCXVersion(),
                "google_dialogflow_cx_environment":             google.ResourceDialogflowCXEnvironment(),
				"google_dns_record_set":                        google.ResourceDnsRecordSet(),
				"google_endpoints_service":                     google.ResourceEndpointsService(),
				"google_folder":                                google.ResourceGoogleFolder(),
				"google_folder_organization_policy":            google.ResourceGoogleFolderOrganizationPolicy(),
				"google_logging_billing_account_sink":          google.ResourceLoggingBillingAccountSink(),
				"google_logging_billing_account_exclusion":     google.ResourceLoggingExclusion(google.BillingAccountLoggingExclusionSchema, google.NewBillingAccountLoggingExclusionUpdater, google.BillingAccountLoggingExclusionIdParseFunc),
				"google_logging_billing_account_bucket_config": google.ResourceLoggingBillingAccountBucketConfig(),
				"google_logging_organization_sink":             google.ResourceLoggingOrganizationSink(),
				"google_logging_organization_exclusion":        google.ResourceLoggingExclusion(google.OrganizationLoggingExclusionSchema, google.NewOrganizationLoggingExclusionUpdater, google.OrganizationLoggingExclusionIdParseFunc),
				"google_logging_organization_bucket_config":    google.ResourceLoggingOrganizationBucketConfig(),
				"google_logging_folder_sink":                   google.ResourceLoggingFolderSink(),
				"google_logging_folder_exclusion":              google.ResourceLoggingExclusion(google.FolderLoggingExclusionSchema, google.NewFolderLoggingExclusionUpdater, google.FolderLoggingExclusionIdParseFunc),
				"google_logging_folder_bucket_config":          google.ResourceLoggingFolderBucketConfig(),
				"google_logging_project_sink":                  google.ResourceLoggingProjectSink(),
				"google_logging_project_exclusion":             google.ResourceLoggingExclusion(google.ProjectLoggingExclusionSchema, google.NewProjectLoggingExclusionUpdater, google.ProjectLoggingExclusionIdParseFunc),
				"google_logging_project_bucket_config":         google.ResourceLoggingProjectBucketConfig(),
				"google_monitoring_dashboard":                  google.ResourceMonitoringDashboard(),
				<% unless version == 'ga' -%>
				"google_project_service_identity":              google.ResourceProjectServiceIdentity(),
				<% end -%>
				"google_service_networking_connection":         google.ResourceServiceNetworkingConnection(),
				"google_sql_database_instance":                 google.ResourceSqlDatabaseInstance(),
				"google_sql_ssl_cert":                          google.ResourceSqlSslCert(),
				"google_sql_user":                              google.ResourceSqlUser(),
				"google_organization_iam_custom_role":          google.ResourceGoogleOrganizationIamCustomRole(),
				"google_organization_policy":                   google.ResourceGoogleOrganizationPolicy(),
				"google_project":                               google.ResourceGoogleProject(),
				"google_project_default_service_accounts":      google.ResourceGoogleProjectDefaultServiceAccounts(),
				"google_project_service":                       google.ResourceGoogleProjectService(),
				"google_project_iam_custom_role":               google.ResourceGoogleProjectIamCustomRole(),
				"google_project_organization_policy":           google.ResourceGoogleProjectOrganizationPolicy(),
				"google_project_usage_export_bucket":           google.ResourceProjectUsageBucket(),
				<% unless version == 'ga' -%>
				"google_runtimeconfig_config":                  runtimeconfigservice.ResourceRuntimeconfigConfig(),
				"google_runtimeconfig_variable":                runtimeconfigservice.ResourceRuntimeconfigVariable(),
				<% end -%>
				"google_service_account":                       google.ResourceGoogleServiceAccount(),
				"google_service_account_key":                   google.ResourceGoogleServiceAccountKey(),
				"google_service_networking_peered_dns_domain":  google.ResourceGoogleServiceNetworkingPeeredDNSDomain(),
				"google_storage_bucket":                        google.ResourceStorageBucket(),
				"google_storage_bucket_acl":                    google.ResourceStorageBucketAcl(),
				"google_storage_bucket_object":                 google.ResourceStorageBucketObject(),
				"google_storage_object_acl":                    google.ResourceStorageObjectAcl(),
				"google_storage_default_object_acl":            google.ResourceStorageDefaultObjectAcl(),
				"google_storage_notification":                  google.ResourceStorageNotification(),
				"google_storage_transfer_job":                  google.ResourceStorageTransferJob(),
				"google_tags_location_tag_binding":             google.ResourceTagsLocationTagBinding(),
				// ####### END handwritten resources ###########
			},
			map[string]*schema.Resource{
				// ####### START non-generated IAM resources ###########
				"google_bigtable_instance_iam_binding":         google.ResourceIamBinding(google.IamBigtableInstanceSchema, google.NewBigtableInstanceUpdater, google.BigtableInstanceIdParseFunc),
				"google_bigtable_instance_iam_member":          google.ResourceIamMember(google.IamBigtableInstanceSchema, google.NewBigtableInstanceUpdater, google.BigtableInstanceIdParseFunc),
				"google_bigtable_instance_iam_policy":          google.ResourceIamPolicy(google.IamBigtableInstanceSchema, google.NewBigtableInstanceUpdater, google.BigtableInstanceIdParseFunc),
				"google_bigtable_table_iam_binding":            google.ResourceIamBinding(google.IamBigtableTableSchema, google.NewBigtableTableUpdater, google.BigtableTableIdParseFunc),
				"google_bigtable_table_iam_member":             google.ResourceIamMember(google.IamBigtableTableSchema, google.NewBigtableTableUpdater, google.BigtableTableIdParseFunc),
				"google_bigtable_table_iam_policy":             google.ResourceIamPolicy(google.IamBigtableTableSchema, google.NewBigtableTableUpdater, google.BigtableTableIdParseFunc),
				"google_bigquery_dataset_iam_binding":          google.ResourceIamBinding(google.IamBigqueryDatasetSchema, google.NewBigqueryDatasetIamUpdater, google.BigqueryDatasetIdParseFunc),
				"google_bigquery_dataset_iam_member":           google.ResourceIamMember(google.IamBigqueryDatasetSchema, google.NewBigqueryDatasetIamUpdater, google.BigqueryDatasetIdParseFunc),
				"google_bigquery_dataset_iam_policy":           google.ResourceIamPolicy(google.IamBigqueryDatasetSchema, google.NewBigqueryDatasetIamUpdater, google.BigqueryDatasetIdParseFunc),
				"google_billing_account_iam_binding":           google.ResourceIamBinding(google.IamBillingAccountSchema, google.NewBillingAccountIamUpdater, google.BillingAccountIdParseFunc),
				"google_billing_account_iam_member":            google.ResourceIamMember(google.IamBillingAccountSchema, google.NewBillingAccountIamUpdater, google.BillingAccountIdParseFunc),
				"google_billing_account_iam_policy":            google.ResourceIamPolicy(google.IamBillingAccountSchema, google.NewBillingAccountIamUpdater, google.BillingAccountIdParseFunc),
				"google_dataproc_cluster_iam_binding":          google.ResourceIamBinding(google.IamDataprocClusterSchema, google.NewDataprocClusterUpdater, google.DataprocClusterIdParseFunc),
				"google_dataproc_cluster_iam_member":           google.ResourceIamMember(google.IamDataprocClusterSchema, google.NewDataprocClusterUpdater, google.DataprocClusterIdParseFunc),
				"google_dataproc_cluster_iam_policy":           google.ResourceIamPolicy(google.IamDataprocClusterSchema, google.NewDataprocClusterUpdater, google.DataprocClusterIdParseFunc),
				"google_dataproc_job_iam_binding":              google.ResourceIamBinding(google.IamDataprocJobSchema, google.NewDataprocJobUpdater, google.DataprocJobIdParseFunc),
				"google_dataproc_job_iam_member":               google.ResourceIamMember(google.IamDataprocJobSchema, google.NewDataprocJobUpdater, google.DataprocJobIdParseFunc),
				"google_dataproc_job_iam_policy":               google.ResourceIamPolicy(google.IamDataprocJobSchema, google.NewDataprocJobUpdater, google.DataprocJobIdParseFunc),
				"google_folder_iam_binding":                    google.ResourceIamBinding(google.IamFolderSchema, google.NewFolderIamUpdater, google.FolderIdParseFunc),
				"google_folder_iam_member":                     google.ResourceIamMember(google.IamFolderSchema, google.NewFolderIamUpdater, google.FolderIdParseFunc),
				"google_folder_iam_policy":                     google.ResourceIamPolicy(google.IamFolderSchema, google.NewFolderIamUpdater, google.FolderIdParseFunc),
				"google_folder_iam_audit_config":               google.ResourceIamAuditConfig(google.IamFolderSchema, google.NewFolderIamUpdater, google.FolderIdParseFunc),
				"google_healthcare_dataset_iam_binding":        google.ResourceIamBindingWithBatching(google.IamHealthcareDatasetSchema, google.NewHealthcareDatasetIamUpdater, google.DatasetIdParseFunc, google.IamBatchingEnabled),
				"google_healthcare_dataset_iam_member":         google.ResourceIamMemberWithBatching(google.IamHealthcareDatasetSchema, google.NewHealthcareDatasetIamUpdater, google.DatasetIdParseFunc, google.IamBatchingEnabled),
				"google_healthcare_dataset_iam_policy":         google.ResourceIamPolicy(google.IamHealthcareDatasetSchema, google.NewHealthcareDatasetIamUpdater, google.DatasetIdParseFunc),
				"google_healthcare_dicom_store_iam_binding":    google.ResourceIamBindingWithBatching(google.IamHealthcareDicomStoreSchema, google.NewHealthcareDicomStoreIamUpdater, google.DicomStoreIdParseFunc, google.IamBatchingEnabled),
				"google_healthcare_dicom_store_iam_member":     google.ResourceIamMemberWithBatching(google.IamHealthcareDicomStoreSchema, google.NewHealthcareDicomStoreIamUpdater, google.DicomStoreIdParseFunc, google.IamBatchingEnabled),
				"google_healthcare_dicom_store_iam_policy":     google.ResourceIamPolicy(google.IamHealthcareDicomStoreSchema, google.NewHealthcareDicomStoreIamUpdater, google.DicomStoreIdParseFunc),
				"google_healthcare_fhir_store_iam_binding":     google.ResourceIamBindingWithBatching(google.IamHealthcareFhirStoreSchema, google.NewHealthcareFhirStoreIamUpdater, google.FhirStoreIdParseFunc, google.IamBatchingEnabled),
				"google_healthcare_fhir_store_iam_member":      google.ResourceIamMemberWithBatching(google.IamHealthcareFhirStoreSchema, google.NewHealthcareFhirStoreIamUpdater, google.FhirStoreIdParseFunc, google.IamBatchingEnabled),
				"google_healthcare_fhir_store_iam_policy":      google.ResourceIamPolicy(google.IamHealthcareFhirStoreSchema, google.NewHealthcareFhirStoreIamUpdater, google.FhirStoreIdParseFunc),
				"google_healthcare_hl7_v2_store_iam_binding":   google.ResourceIamBindingWithBatching(google.IamHealthcareHl7V2StoreSchema, google.NewHealthcareHl7V2StoreIamUpdater, google.Hl7V2StoreIdParseFunc, google.IamBatchingEnabled),
				"google_healthcare_hl7_v2_store_iam_member":    google.ResourceIamMemberWithBatching(google.IamHealthcareHl7V2StoreSchema, google.NewHealthcareHl7V2StoreIamUpdater, google.Hl7V2StoreIdParseFunc, google.IamBatchingEnabled),
				"google_healthcare_hl7_v2_store_iam_policy":    google.ResourceIamPolicy(google.IamHealthcareHl7V2StoreSchema, google.NewHealthcareHl7V2StoreIamUpdater, google.Hl7V2StoreIdParseFunc),
				"google_kms_key_ring_iam_binding":              google.ResourceIamBinding(google.IamKmsKeyRingSchema, google.NewKmsKeyRingIamUpdater, google.KeyRingIdParseFunc),
				"google_kms_key_ring_iam_member":               google.ResourceIamMember(google.IamKmsKeyRingSchema, google.NewKmsKeyRingIamUpdater, google.KeyRingIdParseFunc),
				"google_kms_key_ring_iam_policy":               google.ResourceIamPolicy(google.IamKmsKeyRingSchema, google.NewKmsKeyRingIamUpdater, google.KeyRingIdParseFunc),
				"google_kms_crypto_key_iam_binding":            google.ResourceIamBinding(google.IamKmsCryptoKeySchema, google.NewKmsCryptoKeyIamUpdater, google.CryptoIdParseFunc),
				"google_kms_crypto_key_iam_member":             google.ResourceIamMember(google.IamKmsCryptoKeySchema, google.NewKmsCryptoKeyIamUpdater, google.CryptoIdParseFunc),
				"google_kms_crypto_key_iam_policy":             google.ResourceIamPolicy(google.IamKmsCryptoKeySchema, google.NewKmsCryptoKeyIamUpdater, google.CryptoIdParseFunc),
				"google_spanner_instance_iam_binding":          google.ResourceIamBinding(google.IamSpannerInstanceSchema, google.NewSpannerInstanceIamUpdater, google.SpannerInstanceIdParseFunc),
				"google_spanner_instance_iam_member":           google.ResourceIamMember(google.IamSpannerInstanceSchema, google.NewSpannerInstanceIamUpdater, google.SpannerInstanceIdParseFunc),
				"google_spanner_instance_iam_policy":           google.ResourceIamPolicy(google.IamSpannerInstanceSchema, google.NewSpannerInstanceIamUpdater, google.SpannerInstanceIdParseFunc),
				"google_spanner_database_iam_binding":          google.ResourceIamBinding(google.IamSpannerDatabaseSchema, google.NewSpannerDatabaseIamUpdater, google.SpannerDatabaseIdParseFunc),
				"google_spanner_database_iam_member":           google.ResourceIamMember(google.IamSpannerDatabaseSchema, google.NewSpannerDatabaseIamUpdater, google.SpannerDatabaseIdParseFunc),
				"google_spanner_database_iam_policy":           google.ResourceIamPolicy(google.IamSpannerDatabaseSchema, google.NewSpannerDatabaseIamUpdater, google.SpannerDatabaseIdParseFunc),
				"google_organization_iam_binding":              google.ResourceIamBinding(google.IamOrganizationSchema, google.NewOrganizationIamUpdater, google.OrgIdParseFunc),
				"google_organization_iam_member":               google.ResourceIamMember(google.IamOrganizationSchema, google.NewOrganizationIamUpdater, google.OrgIdParseFunc),
				"google_organization_iam_policy":               google.ResourceIamPolicy(google.IamOrganizationSchema, google.NewOrganizationIamUpdater, google.OrgIdParseFunc),
				"google_organization_iam_audit_config":         google.ResourceIamAuditConfig(google.IamOrganizationSchema, google.NewOrganizationIamUpdater, google.OrgIdParseFunc),
				"google_project_iam_policy":                    google.ResourceIamPolicy(google.IamProjectSchema, google.NewProjectIamUpdater, google.ProjectIdParseFunc),
				"google_project_iam_binding":                   google.ResourceIamBindingWithBatching(google.IamProjectSchema, google.NewProjectIamUpdater, google.ProjectIdParseFunc, google.IamBatchingEnabled),
				"google_project_iam_member":                    google.ResourceIamMemberWithBatching(google.IamProjectSchema, google.NewProjectIamUpdater, google.ProjectIdParseFunc, google.IamBatchingEnabled),
				"google_project_iam_audit_config":              google.ResourceIamAuditConfigWithBatching(google.IamProjectSchema, google.NewProjectIamUpdater, google.ProjectIdParseFunc, google.IamBatchingEnabled),
				"google_pubsub_subscription_iam_binding":       google.ResourceIamBinding(google.IamPubsubSubscriptionSchema, google.NewPubsubSubscriptionIamUpdater, google.PubsubSubscriptionIdParseFunc),
				"google_pubsub_subscription_iam_member":        google.ResourceIamMember(google.IamPubsubSubscriptionSchema, google.NewPubsubSubscriptionIamUpdater, google.PubsubSubscriptionIdParseFunc),
				"google_pubsub_subscription_iam_policy":        google.ResourceIamPolicy(google.IamPubsubSubscriptionSchema, google.NewPubsubSubscriptionIamUpdater, google.PubsubSubscriptionIdParseFunc),
				"google_service_account_iam_binding":           google.ResourceIamBinding(google.IamServiceAccountSchema, google.NewServiceAccountIamUpdater, google.ServiceAccountIdParseFunc),
				"google_service_account_iam_member":            google.ResourceIamMember(google.IamServiceAccountSchema, google.NewServiceAccountIamUpdater, google.ServiceAccountIdParseFunc),
				"google_service_account_iam_policy":            google.ResourceIamPolicy(google.IamServiceAccountSchema, google.NewServiceAccountIamUpdater, google.ServiceAccountIdParseFunc),
				// ####### END non-generated IAM resources ###########
			},
			DclResources,
		)
}

func providerConfigure(ctx context.Context, d *schema.ResourceData, p *schema.Provider) (interface{}, diag.Diagnostics) {
	HandleSDKDefaults(d)
	google.HandleDCLProviderDefaults(d)

	config := google.Config{
		Project:             d.Get("project").(string),
		Region:              d.Get("region").(string),
		Zone:                d.Get("zone").(string),
		UserProjectOverride: d.Get("user_project_override").(bool),
		BillingProject:      d.Get("billing_project").(string),
<% if version.nil? || version == 'ga' -%>
		UserAgent: p.UserAgent("terraform-provider-google", version.ProviderVersion),
<% else -%>
		UserAgent: p.UserAgent("terraform-provider-google-<%= version -%>", version.ProviderVersion),
<% end -%>
	}

	// opt in extension for adding to the User-Agent header
	if ext := os.Getenv("GOOGLE_TERRAFORM_USERAGENT_EXTENSION"); ext != "" {
		ua := config.UserAgent
		config.UserAgent = fmt.Sprintf("%s %s", ua, ext)
	}

	if v, ok := d.GetOk("request_timeout"); ok {
		var err error
		config.RequestTimeout, err = time.ParseDuration(v.(string))
		if err != nil {
			return nil, diag.FromErr(err)
		}
	}

	if v, ok := d.GetOk("request_reason"); ok {
		config.RequestReason = v.(string)
	}

	// Check for primary credentials in config. Note that if neither is set, ADCs
	// will be used if available.
	if v, ok := d.GetOk("access_token"); ok {
		config.AccessToken = v.(string)
	}

	if v, ok := d.GetOk("credentials"); ok {
		config.Credentials = v.(string)
	}

	// only check environment variables if neither value was set in config- this
	// means config beats env var in all cases.
	if config.AccessToken == "" && config.Credentials == "" {
		config.Credentials = google.MultiEnvSearch([]string{
			"GOOGLE_CREDENTIALS",
			"GOOGLE_CLOUD_KEYFILE_JSON",
			"GCLOUD_KEYFILE_JSON",
		})

		config.AccessToken = google.MultiEnvSearch([]string{
			"GOOGLE_OAUTH_ACCESS_TOKEN",
		})
	}

	// Given that impersonate_service_account is a secondary auth method, it has
	// no conflicts to worry about. We pull the env var in a DefaultFunc.
	if v, ok := d.GetOk("impersonate_service_account"); ok {
		config.ImpersonateServiceAccount = v.(string)
	}

	delegates := d.Get("impersonate_service_account_delegates").([]interface{})
	if len(delegates) > 0 {
		config.ImpersonateServiceAccountDelegates = make([]string, len(delegates))
	}
	for i, delegate := range delegates {
		config.ImpersonateServiceAccountDelegates[i] = delegate.(string)
	}

	scopes := d.Get("scopes").([]interface{})
	if len(scopes) > 0 {
		config.Scopes = make([]string, len(scopes))
	}
	for i, scope := range scopes {
		config.Scopes[i] = scope.(string)
	}

	batchCfg, err := google.ExpandProviderBatchingConfig(d.Get("batching"))
	if err != nil {
		return nil, diag.FromErr(err)
	}
	config.BatchingConfig = batchCfg

	// Generated products
	<% products.map.each do |product| -%>
	config.<%= product[:definitions].name -%>BasePath = d.Get("<%= product[:definitions].name.underscore -%>_custom_endpoint").(string)
	<% end -%>

	// Handwritten Products / Versioned / Atypical Entries
	config.CloudBillingBasePath = d.Get(CloudBillingCustomEndpointEntryKey).(string)
	config.ComposerBasePath = d.Get(ComposerCustomEndpointEntryKey).(string)
	config.ContainerBasePath = d.Get(ContainerCustomEndpointEntryKey).(string)
	config.DataflowBasePath = d.Get(DataflowCustomEndpointEntryKey).(string)
	config.IamCredentialsBasePath = d.Get(IamCredentialsCustomEndpointEntryKey).(string)
	config.ResourceManagerV3BasePath = d.Get(ResourceManagerV3CustomEndpointEntryKey).(string)
	<% unless version == "ga" -%>
	config.RuntimeConfigBasePath = d.Get(RuntimeConfigCustomEndpointEntryKey).(string)
	<% end -%>
	config.IAMBasePath = d.Get(IAMCustomEndpointEntryKey).(string)
	config.ServiceNetworkingBasePath = d.Get(ServiceNetworkingCustomEndpointEntryKey).(string)
	config.ServiceUsageBasePath = d.Get(ServiceUsageCustomEndpointEntryKey).(string)
	config.BigtableAdminBasePath = d.Get(BigtableAdminCustomEndpointEntryKey).(string)

	config.TagsLocationBasePath = d.Get(TagsLocationCustomEndpointEntryKey).(string)

	// dcl
	config.ContainerAwsBasePath = d.Get(ContainerAwsCustomEndpointEntryKey).(string)
	config.ContainerAzureBasePath = d.Get(ContainerAzureCustomEndpointEntryKey).(string)

	stopCtx, ok := schema.StopContext(ctx)
	if !ok {
		stopCtx = ctx
	}
	if err := config.LoadAndValidate(stopCtx); err != nil {
		return nil, diag.FromErr(err)
	}

	return google.ProviderDCLConfigure(d, &config), nil
}

func ValidateCredentials(v interface{}, k string) (warnings []string, errors []error) {
	if v == nil || v.(string) == "" {
		return
	}
	creds := v.(string)
	// if this is a path and we can stat it, assume it's ok
	if _, err := os.Stat(creds); err == nil {
		return
	}
	if _, err := googleoauth.CredentialsFromJSON(context.Background(), []byte(creds)); err != nil {
		errors = append(errors,
			fmt.Errorf("JSON credentials are not valid: %s", err))
	}

	return
}

func HandleSDKDefaults(d *schema.ResourceData) {
	if d.Get("impersonate_service_account") == "" {
		d.Set("impersonate_service_account", google.MultiEnvSearch([]string{
			"GOOGLE_IMPERSONATE_SERVICE_ACCOUNT",
		}))
	}

	if d.Get("project") == "" {
		d.Set("project", google.MultiEnvSearch([]string{
			"GOOGLE_PROJECT",
			"GOOGLE_CLOUD_PROJECT",
			"GCLOUD_PROJECT",
			"CLOUDSDK_CORE_PROJECT",
		}))
	}

	if d.Get("billing_project") == "" {
		d.Set("billing_project", google.MultiEnvSearch([]string{
			"GOOGLE_BILLING_PROJECT",
		}))
	}

	if d.Get("region") == "" {
		d.Set("region", google.MultiEnvSearch([]string{
			"GOOGLE_REGION",
			"GCLOUD_REGION",
			"CLOUDSDK_COMPUTE_REGION",
		}))
	}

	if d.Get("zone") == "" {
		d.Set("zone", google.MultiEnvSearch([]string{
			"GOOGLE_ZONE",
			"GCLOUD_ZONE",
			"CLOUDSDK_COMPUTE_ZONE",
		}))
	}

	if d.Get("user_project_override") == "" {
		d.Set("user_project_override", google.MultiEnvSearch([]string{
			"USER_PROJECT_OVERRIDE",
		}))
	}

	if d.Get("request_reason") == "" {
		d.Set("request_reason", google.MultiEnvSearch([]string{
			"CLOUDSDK_CORE_REQUEST_REASON",
		}))
	}

	// Generated Products
	<% products.each do |product| -%>
	if d.Get("<%= product[:definitions].name.underscore -%>_custom_endpoint") == "" {
		d.Set("<%= product[:definitions].name.underscore -%>_custom_endpoint", google.MultiEnvDefault([]string{
			"GOOGLE_<%= product[:definitions].name.underscore.upcase -%>_CUSTOM_ENDPOINT",
		}, google.DefaultBasePaths[google.<%= product[:definitions].name -%>BasePathKey]))
	}
	<% end -%>

	if d.Get(CloudBillingCustomEndpointEntryKey) == "" {
		d.Set(CloudBillingCustomEndpointEntryKey, google.MultiEnvDefault([]string{
			"GOOGLE_CLOUD_BILLING_CUSTOM_ENDPOINT",
		}, google.DefaultBasePaths[google.CloudBillingBasePathKey]))
	}

	if d.Get(ComposerCustomEndpointEntryKey) == "" {
		d.Set(ComposerCustomEndpointEntryKey, google.MultiEnvDefault([]string{
			"GOOGLE_COMPOSER_CUSTOM_ENDPOINT",
		}, google.DefaultBasePaths[google.ComposerBasePathKey]))
	}

	if d.Get(ContainerCustomEndpointEntryKey) == "" {
		d.Set(ContainerCustomEndpointEntryKey, google.MultiEnvDefault([]string{
			"GOOGLE_CONTAINER_CUSTOM_ENDPOINT",
		}, google.DefaultBasePaths[google.ContainerBasePathKey]))
	}

	if d.Get(DataflowCustomEndpointEntryKey) == "" {
		d.Set(DataflowCustomEndpointEntryKey, google.MultiEnvDefault([]string{
			"GOOGLE_DATAFLOW_CUSTOM_ENDPOINT",
		}, google.DefaultBasePaths[google.DataflowBasePathKey]))
	}

	if d.Get(IamCredentialsCustomEndpointEntryKey) == "" {
		d.Set(IamCredentialsCustomEndpointEntryKey, google.MultiEnvDefault([]string{
			"GOOGLE_IAM_CREDENTIALS_CUSTOM_ENDPOINT",
		}, google.DefaultBasePaths[google.IamCredentialsBasePathKey]))
	}

	if d.Get(ResourceManagerV3CustomEndpointEntryKey) == "" {
		d.Set(ResourceManagerV3CustomEndpointEntryKey, google.MultiEnvDefault([]string{
			"GOOGLE_RESOURCE_MANAGER_V3_CUSTOM_ENDPOINT",
		}, google.DefaultBasePaths[google.ResourceManagerV3BasePathKey]))
	}

	<% unless version == "ga" -%>
	if d.Get(RuntimeConfigCustomEndpointEntryKey) == "" {
		d.Set(RuntimeConfigCustomEndpointEntryKey, google.MultiEnvDefault([]string{
			"GOOGLE_RUNTIMECONFIG_CUSTOM_ENDPOINT",
		}, google.DefaultBasePaths[google.RuntimeConfigBasePathKey]))
	}
	<% end -%>

	if d.Get(IAMCustomEndpointEntryKey) == "" {
		d.Set(IAMCustomEndpointEntryKey, google.MultiEnvDefault([]string{
			"GOOGLE_IAM_CUSTOM_ENDPOINT",
		}, google.DefaultBasePaths[google.IAMBasePathKey]))
	}

	if d.Get(ServiceNetworkingCustomEndpointEntryKey) == "" {
		d.Set(ServiceNetworkingCustomEndpointEntryKey, google.MultiEnvDefault([]string{
			"GOOGLE_SERVICE_NETWORKING_CUSTOM_ENDPOINT",
		}, google.DefaultBasePaths[google.ServiceNetworkingBasePathKey]))
	}

	if d.Get(TagsLocationCustomEndpointEntryKey) == "" {
		d.Set(TagsLocationCustomEndpointEntryKey, google.MultiEnvDefault([]string{
			"GOOGLE_TAGS_LOCATION_CUSTOM_ENDPOINT",
		}, google.DefaultBasePaths[google.TagsLocationBasePathKey]))
	}

	if d.Get(ContainerAwsCustomEndpointEntryKey) == "" {
		d.Set(ContainerAwsCustomEndpointEntryKey, google.MultiEnvDefault([]string{
			"GOOGLE_CONTAINERAWS_CUSTOM_ENDPOINT",
		}, google.DefaultBasePaths[google.ContainerAwsBasePathKey]))
	}

	if d.Get(ContainerAzureCustomEndpointEntryKey) == "" {
		d.Set(ContainerAzureCustomEndpointEntryKey, google.MultiEnvDefault([]string{
			"GOOGLE_CONTAINERAZURE_CUSTOM_ENDPOINT",
		}, google.DefaultBasePaths[google.ContainerAzureBasePathKey]))
	}
}

func mergeResourceMaps(ms ...map[string]*schema.Resource) (map[string]*schema.Resource, error) {
	merged := make(map[string]*schema.Resource)
	duplicates := []string{}

	for _, m := range ms {
		for k, v := range m {
			if _, ok := merged[k]; ok {
				duplicates = append(duplicates, k)
			}

			merged[k] = v
		}
	}

	var err error
	if len(duplicates) > 0 {
		err = fmt.Errorf("saw duplicates in mergeResourceMaps: %v", duplicates)
	}

	return merged, err
}